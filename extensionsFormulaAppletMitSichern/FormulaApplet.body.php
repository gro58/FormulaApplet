<?php

class ExtFormulaApplet
{

    /**
     * @param Parser $parser
     * @return bool
     */
    public static function init($parser)
    {
        $parser->setHook('f_app', 'ExtFormulaApplet::formulaAppletTag');
        return true;
    }

    public static function formulaAppletTag($input, $args, $parser)
    {
        $parser->disableCache();
        $attr = [];
        // This time, make a list of attributes and their values, and dump them, along with the user input
        foreach ($args as $name => $value) {
            $attr[] = '<strong>' . htmlspecialchars($name) . '</strong> = ' . htmlspecialchars($value);
        }
        /**
         * The following lines can be used to get the variable values directly:
         * $w = $args['width'] ;
         * $h = $args['height'] ;
         */
/*        $result = '<p>';
$result .= implode( '<br />', $attr ) . "</p>\n\n";
$result .= "<i>" .  htmlspecialchars( $input ) . "</i>"; 
 */
        $result = '<p class="formula_applet" id="' . $args['id'] . '"';
        if (isset($args['data-b64'])) {
            $zip = htmlspecialchars($args['data-b64']);
            if ($zip !== '') {
                $result .= ' data-b64="' . $zip . '"';
            }
        }
        if (isset($args['precision'])) {
            $prec = htmlspecialchars($args['precision']);
            if ($prec !== '') {
                $result .= ' precision="' . $prec . '"';
            }
        }
        if (isset($args['prec'])) {
            $prec = htmlspecialchars($args['prec']);
            if ($prec !== '') {
                $result .= ' prec="' . $prec . '"';
            }
        }
        if (isset($args['valid_digits'])) {
            $vd = htmlspecialchars($args['valid_digits']);
            if ($vd !== '') {
                $result .= ' valid_digits="' . $vd . '"';
            }
        }
        if (isset($args['vd'])) {
            $vd = htmlspecialchars($args['vd']);
            if ($vd !== '') {
                $result .= ' vd="' . $vd . '"';
            }
        }
        if (isset($args['unit'])) {
            $unit = htmlspecialchars($args['unit']);
            if ($unit !== '') {
                $result .= ' unit="' . $unit . '"';
            }
        }
        if (isset($args['mode'])) {
            $md = htmlspecialchars($args['mode']);
            if ($md !== '') {
                $result .= ' mode="' . $md . '"';
            }
        }
        
        $result .= '>';
        ## $result .= implode( '<br />', $attr ) . "</p>\n\n";
        ## str_replace... is now done in prepare_page.js
        ## $input = str_replace('{{result}}', '\MathQuillMathField{}', $input);
        if ( $args['id'] == 'editor') {
            //TODO think of better input example!
            $input = '<span id="math-field">17 + 4 = \class{inputfield}{21}</span></p>';
            $result .= $input;
        } else {
            $result .= htmlspecialchars($input) . "</p>";
        }
        return $result;
    }

    // Hook set in extension.json
    public static function injectJS($out)
    {
        global $wgExtensionAssetsPath;
        global $wgExtensionDirectory;
        // https://www.mediawiki.org/wiki/ResourceLoader/Core_modules
        // (bad timing)
        // $scriptBody = "waitfor_mathquill_and_if_ready_then_do(function () { prepare_page(); });";
        // $out->addScript( "<script type='text/javascript'>" . $scriptBody . "</script>\n" );

        // pass information about url from PHP to javascript
        // https://www.php.net/manual/de/function.file-put-contents.php
        $filename = $wgExtensionDirectory . '/FormulaApplet/js/extensionUrl.js';
        $data = "// File generated by FormulaApplet Extension. \n";
        $data .= "var gf09_path = '" . $wgExtensionAssetsPath . "/FormulaApplet/'; \n";
        $data .= "var isWiki = true;";
        file_put_contents($filename, $data);

        // https://www.mediawiki.org/wiki/ResourceLoader/Developing_with_ResourceLoader#Registering
        // ext.glue evokes calling of extensionUrl.js and glue.js
        // see extension.json -     "ResourceModules": { "ext.glue": { "scripts": [ "js/extensionUrl.js", "js/glue.js" ],

        $out->addModules('ext.glue');
        // $out->addStyle replaced by function in glue.js
        // $out->addStyle( 'https://cdnjs.cloudflare.com/ajax/libs/mathquill/0.10.1/mathquill.css' );
        return true;
    }
}
